#!/usr/bin/env python3

import argparse
import os
import shutil
import subprocess
import sys
from pathlib import Path


def _main():
    SCRIPT_NAME = Path(sys.argv[0]).name
    SCRIPT_DIR = Path(sys.argv[0]).parent.resolve()
    TOP_LEVEL = Path(
        subprocess.check_output(
            "git rev-parse --show-toplevel", shell=True, text=True
        ).strip()
    )

    parser = argparse.ArgumentParser(
        prog=SCRIPT_NAME, description="Configure a chutney testbed"
    )
    parser.add_argument(
        "-n", "--network", default=SCRIPT_DIR.joinpath("networks", "arti-ci")
    )
    args = parser.parse_args()

    # Verify jq is available. Generally it should just be on the PATH.
    # If needed we could add support for passing in a path to jq.
    if not shutil.which("jq"):
        print("It doesn't look like jq is installed.")
        print("On debian, install with:")
        print("apt install jq")
        sys.exit(1)

    # Set and fully resolve chutney bin if not already set.
    CHUTNEY_BIN = os.getenv("CHUTNEY_BIN")
    if not CHUTNEY_BIN:
        CHUTNEY_BIN = shutil.which("chutney")
    if not CHUTNEY_BIN:
        print("Couldn't locate chutney bin. Ensure it's on PATH or set CHUTNEY_BIN.")
        print("You can install with:")
        print(
            "python3 -m pip install git+https://gitlab.torproject.org/tpo/core/chutney.git"
        )
        sys.exit(1)
    if not os.access(CHUTNEY_BIN, os.X_OK):
        print(f"CHUTNEY_BIN='{CHUTNEY_BIN}' doesn't exist or isn't executable")
        sys.exit(1)
    # CHUTNEY_BIN is set; tell the user so.
    print(f"Using chutney at '{CHUTNEY_BIN}'")

    # Set CHUTNEY_DATA_DIR
    CHUTNEY_DATA_DIR = os.getenv("CHUTNEY_DATA_DIR", os.getcwd())

    # It's not really possible to know where the user built the arti binary.
    # Was it a debug build, a release build, did they use '--target <triple>', etc?
    # Try the platform triple build directory first, and then the usual build directory.
    # It's possible we may choose a stale binary, but there's not much else we can
    # do here other than maybe comparing timestamps.
    CHUTNEY_ARTI = None
    for p in [
        Path("target/x86_64-unknown-linux-gnu/quicktest/arti"),
        Path("target/quicktest/arti"),
        Path("target/x86_64-unknown-linux-gnu/debug/arti"),
        Path("target/debug/arti"),
    ]:
        p = TOP_LEVEL.joinpath(p)
        if os.access(p, os.X_OK):
            CHUTNEY_ARTI = p
            break
    if not CHUTNEY_ARTI:
        print(
            "Could not find a debug arti binary. You can build it with 'cargo build -p arti'."
        )
        sys.exit(1)

    with Path(SCRIPT_DIR).joinpath("arti.run").open("w") as c:
        print(f"target={args.network}", file=c)
        print(f'export CHUTNEY_ARTI="{CHUTNEY_ARTI}"', file=c)
        print(f'export CHUTNEY_BIN="{CHUTNEY_BIN}"', file=c)
        print(f'export CHUTNEY_DATA_DIR="{CHUTNEY_DATA_DIR}"', file=c)


if __name__ == "__main__":
    _main()
